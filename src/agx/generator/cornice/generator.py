# -*- coding: utf-8 -*-
from agx.generator.pyegg.utils import (
    class_base_name,
    implicit_dotted_path,
)
from agx.core.util import (
    read_target_node,
    dotted_path,
)
from agx.core.interfaces import IScope
from agx.core import (
    handler,
    Scope,
    registerScope,
    token,
)
from node.ext.uml.interfaces import (
    IOperation,
    IClass,
    IPackage,
    IInterface,
    IInterfaceRealization,
    IDependency,
    IProperty,
    IAssociation,
)


@handler('create_service', 'uml2fs', 'connectorgenerator', 'cornice_service')
def create_service(self, source, target):
    print NotImplementedError("stub generated by AGX.")
    print "==== handler to create a Cornice Service ===="
    tgt = read_target_node(source, target.target)
    print "the target: %s" % tgt.classname

    servicename = tgt.classname.lower()  # prepare for later

    # create an Attribute that will define a cornice service
    from node.ext.python import Attribute
    serviceattr = Attribute()
    serviceattr.targets = [servicename]  # name of attribute: Classname.lower()
    serviceattr.value = 'Service(name="foo", path="bar")'
    # TODO: extract 'name' and 'path' from model

    # create imports for cornice service
    from node.ext.python.utils import Imports
    imps = Imports(tgt.parent)
    imps.set('cornice', 'Service')  # from cornice import Service

    tgt['attr-1'] = serviceattr

    import uuid
    tgt.parent[str(uuid.uuid4())] = Attribute(
        targets=['apiversion'],
        value='Service(params)')

#    del tgt.class

#    print "the target.anchor:"
#    myanchor = target.anchor
#    print myanchor.printtree()
#
    # try to create a new file in the package
#    dr = target.parent
#    from node.ext.python import Module
#    module.parent['services.py'] = Module()
#    module()

#    print "what is in the module? (module.buffer)"
#    for item in module.buffer:
#        print item
    #module()  # persist it
#
# some pseudo code of what shall be done:
#
# - wait for nodeification of the relevant class or module
# - delete the class from the module
# - create an Attribute node instead
#    module[str(uuid.uuid4())] = Attribute(
#                                    targets='foo',
#                                    value='Service(params)'
    print "============= end handler create_service ================"


@handler('handle_GET', 'uml2fs', 'connectorgenerator', 'getscope')
def handle_GET(self, source, target):
    #print "==== handler to create a GET method ===="
    tgt = read_target_node(source, target.target)
    #print tgt.printtree()
    #import pdb; pdb.set_trace()
    funcname = tgt.functionname.lower()

    # a decorator for the function
    from node.ext.python import Decorator
    #dec = Decorator('%s.get()') % funcname  # not works, grrr
    #dec = Decorator('foocorator')  # works! but is undesired :-/
    dec = Decorator(funcname)
    tgt['decorator-1'] = dec
    #insertbefore(dec, tgt)  # TODO: decorator shall be planted on function
    #print "========= end handler ========="


@handler('handle_PUT', 'uml2fs', 'connectorgenerator', 'putscope')
def handle_PUT(self, source, target):
    print "==== handler to create a PUT method ===="
    print NotImplementedError("stub generated by AGX.")


@handler('handle_POST', 'uml2fs', 'connectorgenerator', 'postscope')
def handle_POST(self, source, target):
    print "==== handler to create a POST method ===="
    print NotImplementedError("stub generated by AGX.")


@handler('handle_DELETE', 'uml2fs', 'connectorgenerator', 'deletescope')
def handle_DELETE(self, source, target):
    print "==== handler to create a DELETE method ===="
    print NotImplementedError("stub generated by AGX.")
